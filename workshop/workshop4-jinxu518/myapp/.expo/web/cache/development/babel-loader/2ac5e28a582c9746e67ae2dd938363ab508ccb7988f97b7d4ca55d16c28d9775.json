{"ast":null,"code":"import { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  return _jsx(context.Provider, {\n    value: {\n      contactData: contactData,\n      addContactToLocalStorage: addContactToLocalStorage,\n      sortAsc: sortAsc,\n      sortDesc: sortDesc,\n      handleSearchTextChange: handleSearchTextChange\n    },\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        initialRouteName: \"splash\",\n        children: [_jsx(Stack.Screen, {\n          name: \"splash\",\n          component: SplashScreen,\n          options: {\n            title: \"\",\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"contactlist\",\n          component: ContactList,\n          options: {\n            title: \"Contact List\",\n            headerShown: true\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"addcontact\",\n          component: AddContact,\n          options: {\n            title: \"Add New Contact\",\n            headerShown: true\n          }\n        })]\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","Text","View","NavigationContainer","createNativeStackNavigator","useEffect","useState","AsyncStorage","jsx","_jsx","jsxs","_jsxs","App","context","Provider","value","contactData","addContactToLocalStorage","sortAsc","sortDesc","handleSearchTextChange","children","Stack","Navigator","initialRouteName","Screen","name","component","SplashScreen","options","title","headerShown","ContactList","AddContact","styles","create","container","flex","backgroundColor","alignItems","justifyContent"],"sources":["C:/Users/17101/Desktop/course/MAD/workshop/workshop4-jinxu518/myapp/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport { useEffect, useState } from \"react\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport default function App() {\n  return (\n    \n    <context.Provider\n      value={{ contactData, addContactToLocalStorage, sortAsc, sortDesc, handleSearchTextChange }}\n    >\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"splash\">\n          <Stack.Screen\n            name=\"splash\"\n            component={SplashScreen}\n            options={{ title: \"\", headerShown: false }}\n          />\n          <Stack.Screen\n            name=\"contactlist\"\n            component={ContactList}\n            options={{ title: \"Contact List\", headerShown: true }}\n          />\n          <Stack.Screen\n            name=\"addcontact\"\n            component={AddContact}\n            options={{ title: \"Add New Contact\", headerShown: true }}\n          />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </context.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAAC,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAE5C,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,YAAY,MAAM,2CAA2C;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AACrE,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,OAEEH,IAAA,CAACI,OAAO,CAACC,QAAQ;IACfC,KAAK,EAAE;MAAEC,WAAW,EAAXA,WAAW;MAAEC,wBAAwB,EAAxBA,wBAAwB;MAAEC,OAAO,EAAPA,OAAO;MAAEC,QAAQ,EAARA,QAAQ;MAAEC,sBAAsB,EAAtBA;IAAuB,CAAE;IAAAC,QAAA,EAE5FZ,IAAA,CAACN,mBAAmB;MAAAkB,QAAA,EAClBV,KAAA,CAACW,KAAK,CAACC,SAAS;QAACC,gBAAgB,EAAC,QAAQ;QAAAH,QAAA,GACxCZ,IAAA,CAACa,KAAK,CAACG,MAAM;UACXC,IAAI,EAAC,QAAQ;UACbC,SAAS,EAAEC,YAAa;UACxBC,OAAO,EAAE;YAAEC,KAAK,EAAE,EAAE;YAAEC,WAAW,EAAE;UAAM;QAAE,CAC5C,CAAC,EACFtB,IAAA,CAACa,KAAK,CAACG,MAAM;UACXC,IAAI,EAAC,aAAa;UAClBC,SAAS,EAAEK,WAAY;UACvBH,OAAO,EAAE;YAAEC,KAAK,EAAE,cAAc;YAAEC,WAAW,EAAE;UAAK;QAAE,CACvD,CAAC,EACFtB,IAAA,CAACa,KAAK,CAACG,MAAM;UACXC,IAAI,EAAC,YAAY;UACjBC,SAAS,EAAEM,UAAW;UACtBJ,OAAO,EAAE;YAAEC,KAAK,EAAE,iBAAiB;YAAEC,WAAW,EAAE;UAAK;QAAE,CAC1D,CAAC;MAAA,CACa;IAAC,CACC;EAAC,CACN,CAAC;AAEvB;AAEA,IAAMG,MAAM,GAAGlC,UAAU,CAACmC,MAAM,CAAC;EAC/BC,SAAS,EAAE;IACTC,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,MAAM;IACvBC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}